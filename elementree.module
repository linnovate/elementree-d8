<?php


/**
 * Implements hook_library_info_build().
 */
function  elementree_library_info_build() {
  $libraries = [];
  $config = \Drupal::config('elementree.settings')->get('config');

  $libraries['base'] = [
    'header' => true,
    'js' => [
      'js/elementree-base.js' => [ 'weight' => -1 ],
    ],
  ];

  $libraries['components'] = [
    'header' => true,
    'js' => [
      $config['components_js_path'] => [ 'weight' => -1 ],
    ],
    'dependencies' => [
      'elementree-base',
    ],
  ];

  return $libraries;
}


/**
 * Implements hook_form_alter().
 */
function elementree_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == "layout_builder_update_block" || $form_id == "layout_builder_add_block") {
    $is_layout = true;
  }
  $is_elementree_block = isset($form['settings']) && $form['settings']['provider']['#value'] == 'elementree';
  
  if ($is_layout && !$is_elementree_block) {
   
    $getSectionStorage = $form_state->getBuildInfo()['callback_object']->getCurrentComponent();
    $block = unserialize($getSectionStorage->toArray()['configuration']['block_serialized']); 
    $uuid = $block->uuid();

    $list = \Drupal::config('elementree.settings')->get('list');

    $form['elementree_enable'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable Elementree'),
      '#default_value' => $list[$uuid]['enable'],
      '#weight' => 0,
    );

    $form['elementree_component_name'] = array(
      '#type' => 'textfield',
      '#title' => t('component_name'),
      '#default_value' => $list[$uuid]['component_name'],
      '#weight' => 0,
    );

    $form_value = $form_state->getUserInput();

    $list[$uuid] = [
      'enable' => $form_value['elementree_enable'],
      'component_name' => $form_value['elementree_component_name'],
    ];

    \Drupal::service('config.factory')->getEditable('elementree.settings')
      ->set('list', $list)->save();
  }
}


/**
 * Implements hook_preprocess_HOOK().
 */
function elementree_preprocess_block(&$variables) {
  if (isset($variables['content']['#block_content'])) {
    $uuid = $variables['content']['#block_content']->uuid();
  } else {
    $uuid = $variables['plugin_id'];
  }

  $list = \Drupal::config('elementree.settings')->get('list');

  if ($uuid && isset($list[$uuid]) && $list[$uuid]['enable']) {
    $component_name = $list[$uuid]['component_name'];
    $configs = $variables['configuration'];
    $variables['content'] += elementree_item( $component_name, $configs);
    
    unset($variables['content']['#theme']);
    unset($variables['theme_hook_original']);
  } else {
    $variables['content']['#cache']['max-age']= 0;
  }
}


/**
 * Implements elementree_item().
 */
function elementree_item($component_name, $configs= []){
  return [
    '#markup' => elementree_markup($component_name, $configs),
    '#allowed_tags' => ['div', 'script'],
    '#attached' => [
      'library' => [
        'elementree/base',
        'elementree/components',
      ],
    ],
    ['#cache' => ['max-age' => 0]]
  ];
}


/**
 * Implements elementree_markup().
 */
function elementree_markup($component_name, $configs= []){
  $configs = json_encode($configs);
  $hash = 'cr-' . md5(uniqid(rand(), TRUE));

  return "<div id='$hash'></div>
          <script>
            setTimeout(function() { 
              CRRender(document.getElementById('$hash'), '$component_name', '$configs');
            });
          </script>";
}
